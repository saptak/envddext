{"ast":null,"code":"export const DockerDesktop=\"docker-desktop\";export const CurrentExtensionContext=\"currentExtensionContext\";export const IsK8sEnabled=\"isK8sEnabled\";export const listHostContexts=async ddClient=>{var _ddClient$extension$h;const output=await((_ddClient$extension$h=ddClient.extension.host)===null||_ddClient$extension$h===void 0?void 0:_ddClient$extension$h.cli.exec(\"kubectl\",[\"config\",\"view\",\"-o\",\"jsonpath='{.contexts}'\"]));console.log(output);if(output!==null&&output!==void 0&&output.stderr){console.log(output.stderr);return output.stderr;}return output===null||output===void 0?void 0:output.stdout;};export const setDockerDesktopContext=async ddClient=>{var _ddClient$extension$h2;const output=await((_ddClient$extension$h2=ddClient.extension.host)===null||_ddClient$extension$h2===void 0?void 0:_ddClient$extension$h2.cli.exec(\"kubectl\",[\"config\",\"use-context\",\"docker-desktop\"]));console.log(output);if(output!==null&&output!==void 0&&output.stderr){return output.stderr;}return output===null||output===void 0?void 0:output.stdout;};export const getCurrentHostContext=async ddClient=>{var _ddClient$extension$h3;const output=await((_ddClient$extension$h3=ddClient.extension.host)===null||_ddClient$extension$h3===void 0?void 0:_ddClient$extension$h3.cli.exec(\"kubectl\",[\"config\",\"view\",\"-o\",\"jsonpath='{.current-context}'\"]));console.log(output);if(output!==null&&output!==void 0&&output.stderr){return output.stderr;}return output===null||output===void 0?void 0:output.stdout;};export const checkK8sConnection=async ddClient=>{try{var _ddClient$extension$h4;let output=await((_ddClient$extension$h4=ddClient.extension.host)===null||_ddClient$extension$h4===void 0?void 0:_ddClient$extension$h4.cli.exec(\"kubectl\",[\"cluster-info\",\"--request-timeout\",\"2s\"]));console.log(output);if(output!==null&&output!==void 0&&output.stderr){console.log(output.stderr);return\"false\";}return\"true\";}catch(e){console.log(\"[checkK8sConnection] error : \",e);return\"false\";}};export const listNamespaces=async ddClient=>{var _ddClient$extension$h5;const output=await((_ddClient$extension$h5=ddClient.extension.host)===null||_ddClient$extension$h5===void 0?void 0:_ddClient$extension$h5.cli.exec(\"kubectl\",[\"get\",\"namespaces\",\"--no-headers\",\"-o\",'custom-columns=\":metadata.name\"',\"--context\",\"docker-desktop\"]));console.log(output);if(output!==null&&output!==void 0&&output.stderr){return output.stderr;}return output===null||output===void 0?void 0:output.stdout;};export const listEnvoyGateways=async ddClient=>{var _ddClient$extension$h6;const output=await((_ddClient$extension$h6=ddClient.extension.host)===null||_ddClient$extension$h6===void 0?void 0:_ddClient$extension$h6.cli.exec(\"kubectl\",[\"get\",\"gateways.gateway.envoyproxy.io\",\"-A\",\"-o\",\"json\"]));if(output!==null&&output!==void 0&&output.stderr){return{error:output.stderr};}try{return JSON.parse((output===null||output===void 0?void 0:output.stdout)||'{}');}catch(e){return{error:'Failed to parse gateways JSON'};}};export const listEnvoyHTTPRoutes=async ddClient=>{var _ddClient$extension$h7;const output=await((_ddClient$extension$h7=ddClient.extension.host)===null||_ddClient$extension$h7===void 0?void 0:_ddClient$extension$h7.cli.exec(\"kubectl\",[\"get\",\"httproutes.gateway.envoyproxy.io\",\"-A\",\"-o\",\"json\"]));if(output!==null&&output!==void 0&&output.stderr){return{error:output.stderr};}try{return JSON.parse((output===null||output===void 0?void 0:output.stdout)||'{}');}catch(e){return{error:'Failed to parse httproutes JSON'};}};export const installEnvoyGateway=async function(ddClient){let version=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"latest\";try{var _ddClient$extension$h8,_listOutput$stdout,_ddClient$extension$h10,_ddClient$extension$h11,_ddClient$extension$h12;// Check if the release already exists\nconst listOutput=await((_ddClient$extension$h8=ddClient.extension.host)===null||_ddClient$extension$h8===void 0?void 0:_ddClient$extension$h8.cli.exec(\"helm\",[\"list\"]));console.log(\"Helm list output:\",listOutput);if(listOutput!==null&&listOutput!==void 0&&(_listOutput$stdout=listOutput.stdout)!==null&&_listOutput$stdout!==void 0&&_listOutput$stdout.includes(\"envoy-gateway\")){var _ddClient$extension$h9;// Uninstall the existing release\nconst uninstallOutput=await((_ddClient$extension$h9=ddClient.extension.host)===null||_ddClient$extension$h9===void 0?void 0:_ddClient$extension$h9.cli.exec(\"helm\",[\"uninstall\",\"envoy-gateway\"]));console.log(\"Helm uninstall output:\",uninstallOutput);if(uninstallOutput!==null&&uninstallOutput!==void 0&&uninstallOutput.stderr&&!uninstallOutput.stderr.includes(\"release: not found\")){return{error:uninstallOutput.stderr};}}// Add the Envoy Gateway Helm repository\nconst repoAddOutput=await((_ddClient$extension$h10=ddClient.extension.host)===null||_ddClient$extension$h10===void 0?void 0:_ddClient$extension$h10.cli.exec(\"helm\",[\"repo\",\"add\",\"envoy-gateway\",\"https://envoyproxy.github.io/envoy-gateway-helm\"]));console.log(\"Helm repo add output:\",repoAddOutput);if(repoAddOutput!==null&&repoAddOutput!==void 0&&repoAddOutput.stderr){return{error:repoAddOutput.stderr};}// Update Helm repositories\nconst repoUpdateOutput=await((_ddClient$extension$h11=ddClient.extension.host)===null||_ddClient$extension$h11===void 0?void 0:_ddClient$extension$h11.cli.exec(\"helm\",[\"repo\",\"update\"]));console.log(\"Helm repo update output:\",repoUpdateOutput);if(repoUpdateOutput!==null&&repoUpdateOutput!==void 0&&repoUpdateOutput.stderr){return{error:repoUpdateOutput.stderr};}// Install Envoy Gateway using Helm\nconst installOutput=await((_ddClient$extension$h12=ddClient.extension.host)===null||_ddClient$extension$h12===void 0?void 0:_ddClient$extension$h12.cli.exec(\"helm\",[\"install\",\"envoy-gateway\",\"envoy-gateway/envoy-gateway\",\"--version\",version===\"latest\"?\"v0.0.0-latest\":version,\"--set\",\"installCRDs=true\",\"--wait\",\"--debug\"]));console.log(\"Helm install output:\",installOutput);if(installOutput!==null&&installOutput!==void 0&&installOutput.stderr&&installOutput.stderr.startsWith('Error: ')){return{error:installOutput.stderr};}// Verify CRDs are installed\nconst crdCheck=await checkEnvoyGatewayCRDs(ddClient);if(!crdCheck){return{error:\"Failed to verify Envoy Gateway CRDs installation\"};}return{success:true};}catch(e){console.error(\"Error during Envoy Gateway installation:\",e);return{error:typeof e==='string'?e:JSON.stringify(e,null,2)};}};export const checkEnvoyGatewayCRDs=async ddClient=>{try{var _ddClient$extension$h13,_output$stdout;const output=await((_ddClient$extension$h13=ddClient.extension.host)===null||_ddClient$extension$h13===void 0?void 0:_ddClient$extension$h13.cli.exec(\"kubectl\",[\"api-resources\"]));if(output!==null&&output!==void 0&&output.stderr){console.error(\"Error checking for CRDs:\",output.stderr);return false;}console.log(\"CRD check output:\",output===null||output===void 0?void 0:output.stdout);// Check if the output contains the specific CRD name\nreturn(output===null||output===void 0?void 0:(_output$stdout=output.stdout)===null||_output$stdout===void 0?void 0:_output$stdout.includes(\"gateways.gateway.envoyproxy.io\"))||false;}catch(e){console.error(\"Error executing kubectl api-resources:\",e);return false;}};","map":{"version":3,"names":["DockerDesktop","CurrentExtensionContext","IsK8sEnabled","listHostContexts","ddClient","_ddClient$extension$h","output","extension","host","cli","exec","console","log","stderr","stdout","setDockerDesktopContext","_ddClient$extension$h2","getCurrentHostContext","_ddClient$extension$h3","checkK8sConnection","_ddClient$extension$h4","e","listNamespaces","_ddClient$extension$h5","listEnvoyGateways","_ddClient$extension$h6","error","JSON","parse","listEnvoyHTTPRoutes","_ddClient$extension$h7","installEnvoyGateway","version","arguments","length","undefined","_ddClient$extension$h8","_listOutput$stdout","_ddClient$extension$h10","_ddClient$extension$h11","_ddClient$extension$h12","listOutput","includes","_ddClient$extension$h9","uninstallOutput","repoAddOutput","repoUpdateOutput","installOutput","startsWith","crdCheck","checkEnvoyGatewayCRDs","success","stringify","_ddClient$extension$h13","_output$stdout"],"sources":["/Users/saptak/code/envddext/ui/src/helper/kubernetes.ts"],"sourcesContent":["import { v1 } from \"@docker/extension-api-client-types\";\n\nexport const DockerDesktop = \"docker-desktop\";\nexport const CurrentExtensionContext = \"currentExtensionContext\";\nexport const IsK8sEnabled = \"isK8sEnabled\";\n\nexport const listHostContexts = async (ddClient: v1.DockerDesktopClient) => {\n  const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"config\",\n    \"view\",\n    \"-o\",\n    \"jsonpath='{.contexts}'\",\n  ]);\n  console.log(output);\n  if (output?.stderr) {\n    console.log(output.stderr);\n    return output.stderr;\n  }\n\n  return output?.stdout;\n};\n\nexport const setDockerDesktopContext = async (\n  ddClient: v1.DockerDesktopClient\n) => {\n  const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"config\",\n    \"use-context\",\n    \"docker-desktop\",\n  ]);\n  console.log(output);\n  if (output?.stderr) {\n    return output.stderr;\n  }\n  return output?.stdout;\n};\n\nexport const getCurrentHostContext = async (\n  ddClient: v1.DockerDesktopClient\n) => {\n  const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"config\",\n    \"view\",\n    \"-o\",\n    \"jsonpath='{.current-context}'\",\n  ]);\n  console.log(output);\n  if (output?.stderr) {\n    return output.stderr;\n  }\n  return output?.stdout;\n};\n\nexport const checkK8sConnection = async (ddClient: v1.DockerDesktopClient) => {\n  try {\n    let output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n      \"cluster-info\",\n      \"--request-timeout\",\n      \"2s\",\n    ]);\n    console.log(output);\n    if (output?.stderr) {\n      console.log(output.stderr);\n      return \"false\";\n    }\n    return \"true\";\n  } catch (e: any) {\n    console.log(\"[checkK8sConnection] error : \", e);\n    return \"false\";\n  }\n};\n\nexport const listNamespaces = async (ddClient: v1.DockerDesktopClient) => {\n  const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"get\",\n    \"namespaces\",\n    \"--no-headers\",\n    \"-o\",\n    'custom-columns=\":metadata.name\"',\n    \"--context\",\n    \"docker-desktop\",\n  ]);\n  console.log(output);\n  if (output?.stderr) {\n    return output.stderr;\n  }\n  return output?.stdout;\n};\n\nexport const listEnvoyGateways = async (ddClient: v1.DockerDesktopClient) => {\n  const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"get\",\n    \"gateways.gateway.envoyproxy.io\",\n    \"-A\",\n    \"-o\",\n    \"json\"\n  ]);\n  if (output?.stderr) {\n    return { error: output.stderr };\n  }\n  try {\n    return JSON.parse(output?.stdout || '{}');\n  } catch (e) {\n    return { error: 'Failed to parse gateways JSON' };\n  }\n};\n\nexport const listEnvoyHTTPRoutes = async (ddClient: v1.DockerDesktopClient) => {\n  const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"get\",\n    \"httproutes.gateway.envoyproxy.io\",\n    \"-A\",\n    \"-o\",\n    \"json\"\n  ]);\n  if (output?.stderr) {\n    return { error: output.stderr };\n  }\n  try {\n    return JSON.parse(output?.stdout || '{}');\n  } catch (e) {\n    return { error: 'Failed to parse httproutes JSON' };\n  }\n};\n\nexport const installEnvoyGateway = async (ddClient: v1.DockerDesktopClient, version: string = \"latest\") => {\n  try {\n    // Check if the release already exists\n    const listOutput = await ddClient.extension.host?.cli.exec(\"helm\", [\n      \"list\",\n    ]);\n    console.log(\"Helm list output:\", listOutput);\n\n    if (listOutput?.stdout?.includes(\"envoy-gateway\")) {\n      // Uninstall the existing release\n      const uninstallOutput = await ddClient.extension.host?.cli.exec(\"helm\", [\n        \"uninstall\",\n        \"envoy-gateway\"\n      ]);\n      console.log(\"Helm uninstall output:\", uninstallOutput);\n\n      if (uninstallOutput?.stderr && !uninstallOutput.stderr.includes(\"release: not found\")) {\n        return { error: uninstallOutput.stderr };\n      }\n    }\n\n    // Add the Envoy Gateway Helm repository\n    const repoAddOutput = await ddClient.extension.host?.cli.exec(\"helm\", [\n      \"repo\",\n      \"add\",\n      \"envoy-gateway\",\n      \"https://envoyproxy.github.io/envoy-gateway-helm\"\n    ]);\n    console.log(\"Helm repo add output:\", repoAddOutput);\n\n    if (repoAddOutput?.stderr) {\n      return { error: repoAddOutput.stderr };\n    }\n\n    // Update Helm repositories\n    const repoUpdateOutput = await ddClient.extension.host?.cli.exec(\"helm\", [\n      \"repo\",\n      \"update\"\n    ]);\n    console.log(\"Helm repo update output:\", repoUpdateOutput);\n\n    if (repoUpdateOutput?.stderr) {\n      return { error: repoUpdateOutput.stderr };\n    }\n\n    // Install Envoy Gateway using Helm\n    const installOutput = await ddClient.extension.host?.cli.exec(\"helm\", [\n      \"install\",\n      \"envoy-gateway\",\n      \"envoy-gateway/envoy-gateway\",\n      \"--version\",\n      version === \"latest\" ? \"v0.0.0-latest\" : version,\n      \"--set\",\n      \"installCRDs=true\",\n      \"--wait\",\n      \"--debug\"\n    ]);\n    console.log(\"Helm install output:\", installOutput);\n\n    if (installOutput?.stderr && installOutput.stderr.startsWith('Error: ')) {\n      return { error: installOutput.stderr };\n    }\n\n    // Verify CRDs are installed\n    const crdCheck = await checkEnvoyGatewayCRDs(ddClient);\n    if (!crdCheck) {\n      return { error: \"Failed to verify Envoy Gateway CRDs installation\" };\n    }\n\n    return { success: true };\n  } catch (e: any) {\n    console.error(\"Error during Envoy Gateway installation:\", e);\n    return { error: typeof e === 'string' ? e : JSON.stringify(e, null, 2) };\n  }\n};\n\nexport const checkEnvoyGatewayCRDs = async (ddClient: v1.DockerDesktopClient): Promise<boolean> => {\n  try {\n    const output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n      \"api-resources\",\n    ]);\n    if (output?.stderr) {\n      console.error(\"Error checking for CRDs:\", output.stderr);\n      return false;\n    }\n    console.log(\"CRD check output:\", output?.stdout);\n    // Check if the output contains the specific CRD name\n    return output?.stdout?.includes(\"gateways.gateway.envoyproxy.io\") || false;\n  } catch (e) {\n    console.error(\"Error executing kubectl api-resources:\", e);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}