[{"/Users/saptak/code/envddext/ui/src/index.tsx":"1","/Users/saptak/code/envddext/ui/src/App.tsx":"2","/Users/saptak/code/envddext/ui/src/helper/kubernetes.ts":"3","/Users/saptak/code/envddext/ui/src/services/templateService.ts":"4"},{"size":600,"mtime":1747941825016,"results":"5","hashOfConfig":"6"},{"size":18381,"mtime":1747770987494,"results":"7","hashOfConfig":"6"},{"size":22976,"mtime":1747951402020,"results":"8","hashOfConfig":"6"},{"size":15406,"mtime":1747803290028,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w2bxfx",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saptak/code/envddext/ui/src/index.tsx",[],[],"/Users/saptak/code/envddext/ui/src/App.tsx",["23","24","25","26","27"],[],"import React from \"react\";\nimport {\n  Typography,\n  Box,\n  Paper,\n  Divider,\n  CircularProgress,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Card,\n  CardContent,\n  CardActions,\n  Grid,\n  Snackbar,\n  Alert\n} from \"@mui/material\";\nimport { createDockerDesktopClient } from \"@docker/extension-api-client\";\nimport { listEnvoyGateways, listEnvoyHTTPRoutes, checkEnvoyGatewayCRDs, installEnvoyGateway } from \"./helper/kubernetes\";\nimport { getTemplatesMetadata, loadTemplate, applyTemplate, Template, TemplateMetadata, checkDeploymentStatus } from \"./services/templateService\";\n\nconst ddClient = createDockerDesktopClient();\n\nexport function App() {\n  const [gateways, setGateways] = React.useState<any[]>([]);\n  const [routes, setRoutes] = React.useState<any[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [isEnvoyGatewayInstalled, setIsEnvoyGatewayInstalled] = React.useState(false);\n  const [isInstalling, setIsInstalling] = React.useState(false);\n  const [installationError, setInstallationError] = React.useState<string | null>(null);\n  const [quickStartDialogOpen, setQuickStartDialogOpen] = React.useState(false);\n\n  // Template related state\n  const [templates, setTemplates] = React.useState<TemplateMetadata[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = React.useState<Template | null>(null);\n  const [templateYaml, setTemplateYaml] = React.useState<string>('');\n  const [isApplyingTemplate, setIsApplyingTemplate] = React.useState(false);\n  const [templateError, setTemplateError] = React.useState<string | null>(null);\n  const [templateSuccess, setTemplateSuccess] = React.useState<boolean>(false);\n\n  // Add new state variables\n  const [deploymentStatus, setDeploymentStatus] = React.useState<{\n    status: 'pending' | 'ready' | 'failed';\n    message?: string;\n  } | null>(null);\n  const [statusCheckInterval, setStatusCheckInterval] = React.useState<NodeJS.Timeout | null>(null);\n\n  const fetchData = React.useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    const installed = await checkEnvoyGatewayCRDs(ddClient);\n    setIsEnvoyGatewayInstalled(installed);\n\n    if (installed) {\n      try {\n        const gwResult = await listEnvoyGateways(ddClient);\n        const rtResult = await listEnvoyHTTPRoutes(ddClient);\n        if (gwResult.error) {\n          console.error('Gateway error:', gwResult.error);\n          setError(gwResult.error);\n        }\n        if (rtResult.error) {\n          console.error('Route error:', rtResult.error);\n          setError(rtResult.error);\n        }\n        setGateways(gwResult.items || []);\n        setRoutes(rtResult.items || []);\n      } catch (e: any) {\n        console.error('Caught error:', e);\n        setError(typeof e === 'string' ? e : JSON.stringify(e, null, 2));\n      }\n    }\n    setLoading(false);\n  }, [ddClient]);\n\n  React.useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const handleInstallClick = async () => {\n    setIsInstalling(true);\n    setInstallationError(null);\n    setError(null); // Clear general error when starting installation\n    try {\n      // TODO: Allow user to specify version?\n      const result = await installEnvoyGateway(ddClient, \"latest\"); // Using latest version\n      if (result.error) {\n        console.error('Installation error:', result.error);\n        setInstallationError(result.error);\n      } else {\n        // Installation successful, re-check CRDs and fetch data\n        await fetchData();\n      }\n    } catch (e: any) {\n      console.error('Caught installation error:', e);\n      setInstallationError(typeof e === 'string' ? e : JSON.stringify(e, null, 2));\n    }\n    setIsInstalling(false);\n  };\n\n  const handleQuickStartOpen = () => {\n    // Load templates metadata when opening the dialog\n    setTemplates(getTemplatesMetadata());\n    setSelectedTemplate(null);\n    setTemplateYaml('');\n    setTemplateError(null);\n    setTemplateSuccess(false);\n    setQuickStartDialogOpen(true);\n  };\n\n  const handleQuickStartClose = () => {\n    setQuickStartDialogOpen(false);\n  };\n\n  const handleTemplateSelect = async (templateId: string) => {\n    setTemplateError(null);\n    setTemplateSuccess(false);\n\n    try {\n      const template = await loadTemplate(templateId);\n      setSelectedTemplate(template);\n\n      if (template) {\n        // Combine all resources into a single YAML document with separators\n        const yaml = template.resources.join('\\n---\\n');\n        setTemplateYaml(yaml);\n      } else {\n        setTemplateError(`Failed to load template: ${templateId}`);\n      }\n    } catch (e: any) {\n      console.error('Error loading template:', e);\n      setTemplateError(typeof e === 'string' ? e : JSON.stringify(e, null, 2));\n    }\n  };\n\n  // Add status checking function\n  const checkTemplateDeploymentStatus = async () => {\n    if (!selectedTemplate) return;\n\n    try {\n      const status = await checkDeploymentStatus(ddClient, selectedTemplate);\n      setDeploymentStatus(status);\n\n      if (status.status === 'ready' || status.status === 'failed') {\n        if (statusCheckInterval) {\n          clearInterval(statusCheckInterval);\n          setStatusCheckInterval(null);\n        }\n      }\n    } catch (error) {\n      console.error('Error checking deployment status:', error);\n      setDeploymentStatus({\n        status: 'failed',\n        message: 'Failed to check deployment status'\n      });\n    }\n  };\n\n  // Update handleApplyTemplate\n  const handleApplyTemplate = async () => {\n    if (!selectedTemplate) return;\n\n    setIsApplyingTemplate(true);\n    setTemplateError(null);\n    setTemplateSuccess(false);\n    setDeploymentStatus(null);\n\n    try {\n      const result = await applyTemplate(ddClient, selectedTemplate);\n\n      if (result.success) {\n        setTemplateSuccess(true);\n        // Start checking deployment status\n        const interval = setInterval(checkTemplateDeploymentStatus, 2000);\n        setStatusCheckInterval(interval);\n        // Initial check\n        await checkTemplateDeploymentStatus();\n      } else {\n        setTemplateError(result.error || 'Failed to apply template');\n      }\n    } catch (error: any) {\n      setTemplateError(typeof error === 'string' ? error : JSON.stringify(error, null, 2));\n    } finally {\n      setIsApplyingTemplate(false);\n    }\n  };\n\n  // Clean up interval on unmount\n  React.useEffect(() => {\n    return () => {\n      if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n      }\n    };\n  }, [statusCheckInterval]);\n\n  return (\n    <Box sx={{ p: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Envoy Gateway\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Manage and observe Envoy Gateway resources in your local Kubernetes cluster using Docker Desktop.\n      </Typography>\n\n      {/* Backend Status and Summary */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Typography variant=\"subtitle1\">Backend Status: <b>{error || installationError ? \"error\" : \"ok\"}</b></Typography>\n        <Typography variant=\"subtitle1\">Kubernetes: <b>{loading || isInstalling ? \"Loading...\" : \"Ready\"}</b></Typography>\n        <Typography variant=\"subtitle1\">Gateways: <b>{gateways.length}</b></Typography>\n        <Typography variant=\"subtitle1\">Routes: <b>{routes.length}</b></Typography>\n      </Paper>\n\n      {loading || isInstalling ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 5 }}>\n          <CircularProgress />\n          {isInstalling && <Typography variant=\"body1\" sx={{ ml: 2 }}>Installing Envoy Gateway...</Typography>}\n        </Box>\n      ) : error || installationError ? (\n        <Paper sx={{ p: 2, mb: 3 }}>\n          <Typography color=\"error\" sx={{ whiteSpace: 'pre-wrap' }}>\n            Error: {typeof (error || installationError) === 'string' ? (error || installationError) : JSON.stringify((error || installationError), null, 2)}\n          </Typography>\n        </Paper>\n      ) : !isEnvoyGatewayInstalled ? (\n        <Paper sx={{ p: 2, mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>Envoy Gateway Not Installed</Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            Envoy Gateway Custom Resource Definitions (CRDs) were not found in your Kubernetes cluster.\n            Please install Envoy Gateway to use this extension.\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleInstallClick}\n            disabled={isInstalling}\n          >\n            {isInstalling ? \"Installing...\" : \"Install Envoy Gateway\"}\n          </Button>\n           {installationError && (\n             <Typography color=\"error\" sx={{ whiteSpace: 'pre-wrap', mt: 2 }}>\n               Installation Error: {typeof installationError === 'string' ? installationError : JSON.stringify(installationError, null, 2)}\n             </Typography>\n           )}\n        </Paper>\n      ) : (\n        <>\n          {/* Gateways Section */}\n          <Paper sx={{ p: 2, mb: 3 }}>\n            <Typography variant=\"h6\">Gateways</Typography>\n            <Divider sx={{ my: 1 }} />\n            {gateways.length === 0 ? (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No gateways found\n              </Typography>\n            ) : (\n              gateways.map((gw: any) => (\n                <Typography key={gw.metadata.uid} variant=\"body2\">\n                  {gw.metadata.name} (ns: {gw.metadata.namespace})\n                </Typography>\n              ))\n            )}\n          </Paper>\n\n          {/* Routes Section */}\n          <Paper sx={{ p: 2, mb: 3 }}>\n            <Typography variant=\"h6\">Routes</Typography>\n            <Divider sx={{ my: 1 }} />\n            {routes.length === 0 ? (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No routes found\n              </Typography>\n            ) : (\n              routes.map((rt: any) => (\n                <Typography key={rt.metadata.uid} variant=\"body2\">\n                  {rt.metadata.name} (ns: {rt.metadata.namespace})\n                </Typography>\n              ))\n            )}\n          </Paper>\n\n          {/* Quick Setup Section */}\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\">🚀 Quick Setup</Typography>\n            <Divider sx={{ my: 1 }} />\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              Get started with Envoy Gateway quickly for learning and local development.\n            </Typography>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleQuickStartOpen}\n              sx={{ mt: 1 }}\n            >\n              Launch Quick Start\n            </Button>\n          </Paper>\n        </>\n      )}\n\n      {/* Quick Start Dialog */}\n      <Dialog\n        open={quickStartDialogOpen}\n        onClose={handleQuickStartClose}\n        aria-labelledby=\"quick-start-dialog-title\"\n        aria-describedby=\"quick-start-dialog-description\"\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle id=\"quick-start-dialog-title\">\n          🚀 Envoy Gateway Quick Start\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"quick-start-dialog-description\" sx={{ mb: 2 }}>\n            Welcome to the Envoy Gateway Quick Start! This wizard will help you get started with common Envoy Gateway use cases.\n            Choose one of the examples below to deploy a complete working configuration to your Kubernetes cluster.\n          </DialogContentText>\n\n          {templateError && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              <Typography variant=\"subtitle2\" fontWeight=\"bold\">Error:</Typography>\n              <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\n                {templateError}\n              </Typography>\n              {templateError.includes(\"Gateway API CRDs are not installed\") && (\n                <Box sx={{ mt: 1 }}>\n                  <Typography variant=\"subtitle2\">Troubleshooting:</Typography>\n                  <Typography variant=\"body2\">\n                    1. Make sure Envoy Gateway is installed by clicking the \"Install Envoy Gateway\" button on the main page.\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    2. If the issue persists, try restarting Docker Desktop and Kubernetes.\n                  </Typography>\n                </Box>\n              )}\n              {templateError.includes(\"Failed to create GatewayClass\") && (\n                <Box sx={{ mt: 1 }}>\n                  <Typography variant=\"subtitle2\">Troubleshooting:</Typography>\n                  <Typography variant=\"body2\">\n                    1. Check if Kubernetes is running properly.\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    2. Verify that Envoy Gateway is installed correctly.\n                  </Typography>\n                </Box>\n              )}\n            </Alert>\n          )}\n\n          {templateSuccess && (\n            <Alert severity=\"success\" sx={{ mb: 2 }}>\n              Template applied successfully!\n            </Alert>\n          )}\n\n          {!selectedTemplate ? (\n            <>\n              <Typography variant=\"subtitle1\" sx={{ mt: 3, mb: 1 }}>\n                Available Examples:\n              </Typography>\n              <Grid container spacing={2}>\n                {templates.map((template) => (\n                  <Grid item xs={12} md={6} key={template.id}>\n                    <Card variant=\"outlined\">\n                      <CardContent>\n                        <Typography variant=\"h6\" gutterBottom>\n                          {template.name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {template.description}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', mt: 1 }}>\n                          Difficulty: {template.difficulty}\n                        </Typography>\n                      </CardContent>\n                      <CardActions>\n                        <Button\n                          size=\"small\"\n                          color=\"primary\"\n                          onClick={() => handleTemplateSelect(template.id)}\n                        >\n                          Select\n                        </Button>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                ))}\n              </Grid>\n            </>\n          ) : (\n            <>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\">\n                  {selectedTemplate.metadata.name}\n                </Typography>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => {\n                    setSelectedTemplate(null);\n                    if (statusCheckInterval) {\n                      clearInterval(statusCheckInterval);\n                      setStatusCheckInterval(null);\n                    }\n                    setDeploymentStatus(null);\n                  }}\n                >\n                  Back to Templates\n                </Button>\n              </Box>\n\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                {selectedTemplate.metadata.description}\n              </Typography>\n\n              {deploymentStatus && (\n                <Alert\n                  severity={\n                    deploymentStatus.status === 'ready' ? 'success' :\n                    deploymentStatus.status === 'failed' ? 'error' : 'info'\n                  }\n                  sx={{ mb: 2 }}\n                >\n                  <Typography variant=\"subtitle2\" fontWeight=\"bold\">\n                    {deploymentStatus.status === 'ready' ? 'Deployment Status: Ready' :\n                     deploymentStatus.status === 'failed' ? 'Deployment Status: Failed' :\n                     'Deployment Status: In Progress'}\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\n                    {deploymentStatus.message}\n                  </Typography>\n                </Alert>\n              )}\n\n              <Typography variant=\"subtitle1\" sx={{ mt: 3, mb: 1 }}>\n                Template YAML:\n              </Typography>\n\n              <Paper\n                elevation={0}\n                variant=\"outlined\"\n                sx={{\n                  mb: 2,\n                  maxHeight: '300px',\n                  overflow: 'auto',\n                  backgroundColor: 'rgba(0, 0, 0, 0.04)'\n                }}\n              >\n                <Box\n                  component=\"pre\"\n                  sx={{\n                    fontFamily: 'monospace',\n                    fontSize: '0.875rem',\n                    p: 2,\n                    m: 0,\n                    overflowX: 'auto',\n                    whiteSpace: 'pre-wrap',\n                    wordBreak: 'break-word'\n                  }}\n                >\n                  {templateYaml}\n                </Box>\n              </Paper>\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleApplyTemplate}\n                disabled={isApplyingTemplate}\n                sx={{ mt: 2 }}\n              >\n                {isApplyingTemplate ? \"Applying...\" : \"Apply Template\"}\n              </Button>\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleQuickStartClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Success Snackbar */}\n      <Snackbar\n        open={templateSuccess}\n        autoHideDuration={6000}\n        onClose={() => setTemplateSuccess(false)}\n      >\n        <Alert onClose={() => setTemplateSuccess(false)} severity=\"success\">\n          Template applied successfully!\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n}\n","/Users/saptak/code/envddext/ui/src/helper/kubernetes.ts",[],[],"/Users/saptak/code/envddext/ui/src/services/templateService.ts",[],[],{"ruleId":"28","severity":1,"message":"29","line":14,"column":3,"nodeType":"30","messageId":"31","endLine":14,"endColumn":7},{"ruleId":"28","severity":1,"message":"32","line":15,"column":3,"nodeType":"30","messageId":"31","endLine":15,"endColumn":11},{"ruleId":"28","severity":1,"message":"33","line":16,"column":3,"nodeType":"30","messageId":"31","endLine":16,"endColumn":15},{"ruleId":"28","severity":1,"message":"34","line":17,"column":3,"nodeType":"30","messageId":"31","endLine":17,"endColumn":15},{"ruleId":"35","severity":1,"message":"36","line":82,"column":6,"nodeType":"37","endLine":82,"endColumn":16,"suggestions":"38"},"@typescript-eslint/no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has an unnecessary dependency: 'ddClient'. Either exclude it or remove the dependency array. Outer scope values like 'ddClient' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: []",{"range":"42","text":"43"},[2979,2989],"[]"]