[{"/Users/saptak/code/envddext/ui/src/index.tsx":"1","/Users/saptak/code/envddext/ui/src/App.tsx":"2","/Users/saptak/code/envddext/ui/src/helper/kubernetes.ts":"3"},{"size":600,"mtime":1747694722030,"results":"4","hashOfConfig":"5"},{"size":6702,"mtime":1747697239670,"results":"6","hashOfConfig":"5"},{"size":6368,"mtime":1747700333942,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w2bxfx",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saptak/code/envddext/ui/src/index.tsx",[],[],"/Users/saptak/code/envddext/ui/src/App.tsx",["18"],[],"import React from \"react\";\nimport { Typography, Box, Paper, Divider, CircularProgress, Button } from \"@mui/material\";\nimport { createDockerDesktopClient } from \"@docker/extension-api-client\";\nimport { listEnvoyGateways, listEnvoyHTTPRoutes, checkEnvoyGatewayCRDs, installEnvoyGateway } from \"./helper/kubernetes\";\n\nconst ddClient = createDockerDesktopClient();\n\nexport function App() {\n  const [gateways, setGateways] = React.useState<any[]>([]);\n  const [routes, setRoutes] = React.useState<any[]>([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [isEnvoyGatewayInstalled, setIsEnvoyGatewayInstalled] = React.useState(false);\n  const [isInstalling, setIsInstalling] = React.useState(false);\n  const [installationError, setInstallationError] = React.useState<string | null>(null);\n\n  const fetchData = React.useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    const installed = await checkEnvoyGatewayCRDs(ddClient);\n    setIsEnvoyGatewayInstalled(installed);\n\n    if (installed) {\n      try {\n        const gwResult = await listEnvoyGateways(ddClient);\n        const rtResult = await listEnvoyHTTPRoutes(ddClient);\n        if (gwResult.error) {\n          console.error('Gateway error:', gwResult.error);\n          setError(gwResult.error);\n        }\n        if (rtResult.error) {\n          console.error('Route error:', rtResult.error);\n          setError(rtResult.error);\n        }\n        setGateways(gwResult.items || []);\n        setRoutes(rtResult.items || []);\n      } catch (e: any) {\n        console.error('Caught error:', e);\n        setError(typeof e === 'string' ? e : JSON.stringify(e, null, 2));\n      }\n    }\n    setLoading(false);\n  }, [ddClient]);\n\n  React.useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const handleInstallClick = async () => {\n    setIsInstalling(true);\n    setInstallationError(null);\n    setError(null); // Clear general error when starting installation\n    try {\n      // TODO: Allow user to specify version?\n      const result = await installEnvoyGateway(ddClient, \"latest\"); // Using latest version\n      if (result.error) {\n        console.error('Installation error:', result.error);\n        setInstallationError(result.error);\n      } else {\n        // Installation successful, re-check CRDs and fetch data\n        await fetchData();\n      }\n    } catch (e: any) {\n      console.error('Caught installation error:', e);\n      setInstallationError(typeof e === 'string' ? e : JSON.stringify(e, null, 2));\n    }\n    setIsInstalling(false);\n  };\n\n  return (\n    <Box sx={{ p: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Envoy Gateway\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Manage and observe Envoy Gateway resources in your local Kubernetes cluster using Docker Desktop.\n      </Typography>\n\n      {/* Backend Status and Summary */}\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <Typography variant=\"subtitle1\">Backend Status: <b>{error || installationError ? \"error\" : \"ok\"}</b></Typography>\n        <Typography variant=\"subtitle1\">Kubernetes: <b>{loading || isInstalling ? \"Loading...\" : \"Ready\"}</b></Typography>\n        <Typography variant=\"subtitle1\">Gateways: <b>{gateways.length}</b></Typography>\n        <Typography variant=\"subtitle1\">Routes: <b>{routes.length}</b></Typography>\n      </Paper>\n\n      {loading || isInstalling ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 5 }}>\n          <CircularProgress />\n          {isInstalling && <Typography variant=\"body1\" sx={{ ml: 2 }}>Installing Envoy Gateway...</Typography>}\n        </Box>\n      ) : error || installationError ? (\n        <Paper sx={{ p: 2, mb: 3 }}>\n          <Typography color=\"error\" sx={{ whiteSpace: 'pre-wrap' }}>\n            Error: {typeof (error || installationError) === 'string' ? (error || installationError) : JSON.stringify((error || installationError), null, 2)}\n          </Typography>\n        </Paper>\n      ) : !isEnvoyGatewayInstalled ? (\n        <Paper sx={{ p: 2, mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>Envoy Gateway Not Installed</Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            Envoy Gateway Custom Resource Definitions (CRDs) were not found in your Kubernetes cluster.\n            Please install Envoy Gateway to use this extension.\n          </Typography>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={handleInstallClick}\n            disabled={isInstalling}\n          >\n            {isInstalling ? \"Installing...\" : \"Install Envoy Gateway\"}\n          </Button>\n           {installationError && (\n             <Typography color=\"error\" sx={{ whiteSpace: 'pre-wrap', mt: 2 }}>\n               Installation Error: {typeof installationError === 'string' ? installationError : JSON.stringify(installationError, null, 2)}\n             </Typography>\n           )}\n        </Paper>\n      ) : (\n        <>\n          {/* Gateways Section */}\n          <Paper sx={{ p: 2, mb: 3 }}>\n            <Typography variant=\"h6\">Gateways</Typography>\n            <Divider sx={{ my: 1 }} />\n            {gateways.length === 0 ? (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No gateways found\n              </Typography>\n            ) : (\n              gateways.map((gw: any) => (\n                <Typography key={gw.metadata.uid} variant=\"body2\">\n                  {gw.metadata.name} (ns: {gw.metadata.namespace})\n                </Typography>\n              ))\n            )}\n          </Paper>\n\n          {/* Routes Section */}\n          <Paper sx={{ p: 2, mb: 3 }}>\n            <Typography variant=\"h6\">Routes</Typography>\n            <Divider sx={{ my: 1 }} />\n            {routes.length === 0 ? (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No routes found\n              </Typography>\n            ) : (\n              routes.map((rt: any) => (\n                <Typography key={rt.metadata.uid} variant=\"body2\">\n                  {rt.metadata.name} (ns: {rt.metadata.namespace})\n                </Typography>\n              ))\n            )}\n          </Paper>\n\n          {/* Quick Setup Section */}\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\">ðŸš€ Quick Setup</Typography>\n            <Divider sx={{ my: 1 }} />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Get started with Envoy Gateway quickly for learning and local development.\n            </Typography>\n          </Paper>\n        </>\n      )}\n    </Box>\n  );\n}\n","/Users/saptak/code/envddext/ui/src/helper/kubernetes.ts",[],[],{"ruleId":"19","severity":1,"message":"20","line":43,"column":6,"nodeType":"21","endLine":43,"endColumn":16,"suggestions":"22"},"react-hooks/exhaustive-deps","React Hook React.useCallback has an unnecessary dependency: 'ddClient'. Either exclude it or remove the dependency array. Outer scope values like 'ddClient' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["23"],{"desc":"24","fix":"25"},"Update the dependencies array to be: []",{"range":"26","text":"27"},[1755,1765],"[]"]